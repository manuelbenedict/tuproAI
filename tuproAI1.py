# -*- coding: utf-8 -*-
"""10_IF4305_1301194182

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Zlv08NlJDHAUY8NnS1Qari68JG-2Ryb7

# Tugas Pemrograman 1

*   IF - 43 - 05
*   Kelompok 10
    1. Igga Febrian Virgiani  (1301194283)
    2. Arpriansah Yonathan    (1301194112)
    3. Manuel Benedict        (1301194182)

**Library dan inisialisasi**
"""

from random import randrange, uniform

import math

class gen1:
    def __init__(self, nilaikromosom, nilaiFitness, nilaiFungsi):
        self.kromosom = nilaikromosom
        self.fitness = nilaiFitness
        self.fungsi = nilaiFungsi

"""**Fungsi Matematika**"""

def math_func(x, y):
    return ((math.cos(x*x))*(math.sin(y*y)) + x + y)

"""**Dekode kromosom**"""

def dekode(ind):
  x = -1+((2+1)/((2**-1)+(2**-2)+(2**-3))) * \
      ((ind[0]*2**-1)+(ind[1]*2**-2)+(ind[2]*2**-3))
  y = -1+((1+1)/((2**-1)+(2**-2)+(2**-3))) * \
      ((ind[3]*2**-1)+(ind[4]*2**-2)+(ind[5]*2**-3))
  return x, y

"""**Desain kromosom**"""

def fungsiKromosom(pjg_kromosom):
  kromosom = []
  for i in range(pjg_kromosom):
   kromosom.append(randrange(0, 2))
  return kromosom

"""**Ukuran populasi**"""

def fungsiPopulasi(pjg_populasi, pjg_kromosom):
    populasi = []
    for i in range(pjg_populasi):
        kromosom = fungsiKromosom(pjg_kromosom)
        x, y = dekode(kromosom)
        nilaiobj = math_func(x, y)
        nilaifitness = fungsiFitness(x, y)
        populasi.append(gen1(kromosom, nilaifitness, nilaiobj))
    return populasi

"""**Perhitungan fitness**"""

def fungsiFitness(x, y,):
    if ((x >= -1) and (x <= 2)) and ((y >= -1) and (y <= 1)):
        return (math_func(x, y))
    else:
        return 0

"""**Pemilihan orangtua**"""

def fungsiSeleksiOrangTua(populasi): 
    array1 = []
    while (len(array1) < 2 or array1 == []):
        individu = populasi[randrange(1, 7)]
        if (array1 == []) or (individu.fitness > array1[0].fitness):
            array1.append(individu)
    return array1

"""**Crossover**"""

def fungsiCrossOver(parent1, parent2):
    probabilitas_crossover = 0.7
    r = uniform(0, 1)
    if r < probabilitas_crossover:
        y = len(populasi)
        x = randrange(1, 4)
        isi = parent1.kromosom[x:y] 
        parent1.kromosom[x:y] = parent2.kromosom[x:y]
        parent2.kromosom[x:y] = isi
    return parent1, parent2

"""**Mutasi**"""

def fungsiMutasi(parent1, parent2):
    probabilitas_mutasi = 0.3
    for i in range(2):
        for j in range(len(parent2.kromosom)):
            r = uniform(0, 1)
            if r < probabilitas_mutasi:
                if i == 0:
                    if (parent1.kromosom[j] == 1):
                        parent1.kromosom[j] = 0
                    elif (parent1.kromosom[j] == 0):
                        parent1.kromosom[j] = 1
                else:
                    if (parent2.kromosom[j] == 1):
                        parent2.kromosom[j] = 0
                    elif (parent2.kromosom[j] == 0):
                        parent2.kromosom[j] = 1
    return parent1, parent2

"""**Metode survivor**"""

def fungsiSteadyState(newPopulasi, mutasi1, mutasi2):
    x, y = 0, 0
    x, y = dekode(mutasi1.kromosom)
    nilaiobj = math_func(x, y)
    nilaifitness = fungsiFitness(x, y)
    mutasi1.fungsi = nilaiobj
    mutasi1.fitness = nilaifitness

    x, y = dekode(mutasi2.kromosom)
    nilaiobj = math_func(x, y)
    nilaifitness = fungsiFitness(x, y)
    mutasi2.fungsi = nilaiobj
    mutasi2.fitness = nilaifitness

    newPopulasi[len(populasi)-2] = mutasi1
    newPopulasi[len(populasi)-1] = mutasi2

    newPopulasi.sort(key=lambda z : z.fitness, reverse=True)

    return populasi

"""**Main program**"""

populasi = fungsiPopulasi(10, 6)
populasi.sort(key=lambda q: q.fitness, reverse=True)
for i in range(10):
    parent = []
    parent = fungsiSeleksiOrangTua(populasi)
    child1, child2 = fungsiCrossOver(parent[0], parent[1])
    mutasi1, mutasi2 = fungsiMutasi(child1, child2)
    populasi = fungsiSteadyState(populasi, mutasi1, mutasi2)
    print('Hasil Output yang dihasilkan : ')
    print('Kromosom : ', populasi[0].kromosom)
    x, y = dekode(populasi[0].kromosom)
    print('x = ', x)
    print('y = ', y)
    print('\n')