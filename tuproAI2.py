# -*- coding: utf-8 -*-
"""10_IF4305_1301194xxx

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RuqZerumbI9EwLMD1K07cl5l_CP-ODOw

# Tugas Pemrograman 2
Kelompok : 10

Kelas : IF - 43 - 05
*   Arpriansah Yonathan (1301194112)
*   Igga Febrian Virgiani (1301194283)
*   Manuel Benedict (1301194182)
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

pelayanan = {
    'tidak puas' : [0.0 ,0.0 ,24.0, 33.0],
    'cukup puas' : [24.0, 33.0, 67.0, 76.0] ,
    'puas' : [67.0, 76.0, 100.0, 100.0]
}

makanan = {
    'tidak lezat' : [0.0,0.0,3.0,4.0] ,
    'cukup lezat' : [3.0, 4.0, 7.0, 8.0],
    'lezat' : [7.0,8.0,10.0,10.0]
}

kelayakan = {'baik':80.0, 'buruk':25.0}

"""## Fungsi fuzzifikasi"""

def Func_pelayanan (x) :
  hasil_pelayanan = [] 
  if (x>=0.0 and x<=33.0) :
    hasil_pelayanan.append(tidakPuas(x))
  if (x>=24.0 and x<=76.0) :
    hasil_pelayanan.append(cukupPuas(x))
  if (x>=67.0 and x<=100):
    hasil_pelayanan.append(Puas(x))
  return hasil_pelayanan

def tidakPuas(x) :
  if (x>=0.0 and x<=24.0) :
    return "Tidak puas", 1
  elif (x>24.0 and x<=33.0) :
    return "Tidak puas", (33.0-x)/(33.0-24.0)

def cukupPuas(x) :
  if (x>=24.0 and x<=33.0) :
    return "Cukup puas", (x-24.0)/(33.0-24.0)
  elif (x>33.0 and x<67.0) :
    return "Cukup puas", 1
  elif (x>=67.0 and x<=76.0) :
    return "Cukup puas", (76.0-x)/(76.0-67.0)

def Puas(x) :
  if (x>=67.0 and x<=76.0) :
    return "Tidak puas", (x-76.0)/(76.0-67.0)
  elif (x>76 and x<=100.0) :
    return "Tidak puas", 1

def Func_makanan (x) :
  hasil_makanan = [] 
  if (x>=0.0 and x<=4.0) :
    hasil_makanan.append(tidakLezat(x))
  if (x>=3.0 and x<=8.0) :
    hasil_makanan.append(cukupLezat(x))
  if (x>=7.0 and x<=10):
    hasil_makanan.append(Lezat(x))
  return hasil_makanan

def tidakLezat(x) :
  if (x>=0.0 and x<=3.0) :
    return "Tidak lezat", 1
  elif (x>3.0 and x<=4.0) :
    return "Tidak lezat", (4.0-x)/(4.0-3.0)

def cukupLezat(x) :
  if (x>=3.0 and x<=4.0) :
    return "Cukup lezat", (x-3.0)/(4.0-3.0)
  elif (x>4.0 and x<7.0) :
    return "Cukup lezat", 1
  elif (x>=7.0 and x<=8.0) :
    return "Cukup lezat", (8.0-x)/(8.0-7.0)

def Lezat(x) :
  if (x>=7.0 and x<=8.0) :
    return "Lezat", (x-7.0)/(8.0-7.0)
  elif (x>8.0 and x<=10.0) :
    return "Lezat", 1

"""##Jumlah dan nama linguistik"""

def plot_linguistik(batas, warna, label='', min=0, max=1):
  y = [0, 1, 1, 0]
  plt.plot( (min, batas[0]), (0,0), warna )
  for i in range(len(batas)-1):
    plt.plot( (batas[i], batas[i+1]), (y[i], y[i+1]), warna)
  plt.plot( (batas[-1], max), (0,0), warna, label=label)

def plot_membership( membership, min=0, max=1 ):
  warna = ['r', 'g', 'b', 'c', 'm', 'y', 'k']
  i=0
  for l in membership:
    plot_linguistik(membership[l], warna[i], l, min=min, max=max)
    i += 1
  plt.legend(loc=3)
  plt.show()

plt.title('Grafik Pelayanan')
plot_membership(pelayanan)
plt.title('Grafik Makanan')
plot_membership(makanan)

"""## Fungsi inferensi"""

def inferensi(pelayanan, makanan) :
  if (pelayanan == 'Tidak puas') and (makanan == 'Tidak lezat') :
    return 'Buruk'
  elif (pelayanan == 'Tidak puas') and (makanan == 'Cukup lezat') :
    return 'Buruk'
  elif (pelayanan == 'Tidak puas') and (makanan == 'Lezat') :
    return 'Buruk'
  elif (pelayanan == 'Cukup puas') and (makanan == 'Tidak lezat') :
    return 'Buruk'
  elif (pelayanan == 'Puas') and (makanan == 'Tidak lezat') :
    return 'Buruk'
  elif (pelayanan == 'Cukup puas') and (makanan == 'Cukup lezat') :
    return 'Baik'
  elif (pelayanan == 'Puas') and (makanan == 'Cukup lezat') :
    return 'Baik'
  elif (pelayanan == 'Cukup puas') and (makanan == 'Lezat') :
    return 'Baik'
  elif (pelayanan == 'Puas') and (makanan == 'Lezat') :
    return 'Baik'

def nilaiInferensi(Pelayanan, Makanan) :
  maxBaik = 0.0
  maxBuruk = 0.0
  for i in Func_pelayanan(Pelayanan) :
    for j in Func_makanan(Makanan) :
      if inferensi(i[0],j[0]) == 'Baik' :
        if maxBaik < min(i[1], j[1]) :
          maxBaik = min(i[1], j[1])
      if inferensi(i[0],j[0] ) == 'Buruk' :
        if maxBuruk < min(i[1], j[1]) :
          maxBuruk = min(i[1], j[1])
  return ('Baik', maxBaik), ('Buruk', maxBuruk)

"""## Fungsi defuzzifikasi (Metode Sugeno)"""

def defuzzSugeno (x,y) :
  hasil = (x*25+y*80)/(x+y)
  return hasil

"""## Program utama"""

df = pd.read_excel('restoran.xlsx')

print('nilaiSugeno')
temp = []
for i in df.iterrows() :
  tampungSugeno = nilaiInferensi(i[1].loc['pelayanan'], i[1].loc['makanan'])
  temp.append(defuzzSugeno(tampungSugeno[0][1],tampungSugeno[1][1]))

penilaian_fix = []
id_fix = []
for i in range(len(temp)):
  penilaian_fix.append(temp[i])
  id_fix.append(i+1)

sort_penilaian = sorted(zip(id_fix, penilaian_fix), key=lambda x:x[1], reverse=True)
print(sort_penilaian)

Hasil = []
for i in range(10):
  Hasil.append(sort_penilaian[i])
print(Hasil)

pd.DataFrame(Hasil).to_excel('Hasil.xlsx', header=False, index=False)